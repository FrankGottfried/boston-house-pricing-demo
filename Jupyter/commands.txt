from hana_ml import dataframe
from hana_ml.algorithms.pal import clustering
from hana_ml.algorithms.pal.unified_regression import UnifiedRegression

from cfenv import AppEnv
env = AppEnv()
hana = env.get_service(label='hana')
hana.credentials


user = hana.credentials['user']
url = hana.credentials['host']
port = hana.credentials['port']
passwd = hana.credentials['password']
schema = hana.credentials['schema']

from hana_ml import dataframe
from hana_ml.algorithms.pal import clustering
from hana_ml.algorithms.pal import trees

connection_context = dataframe.ConnectionContext("{}".format(url),int("{}".format(port)), "{}".format(user), "{}".format(passwd),
                            encrypt="true", sslValidateCertificate="false")


bostondata_hdf = connection_context.sql('SELECT * FROM {schema}.BOSTON_HOUSING_PRICES'.format(schema=schema))
bostondata_hdf.head(5).collect()


hdf = bostondata_hdf.cast(['CRIM', "ZN", "INDUS", "NOX", "RM", "AGE", "DIS", "PTRATIO", "BLACK", "LSTAT", "MEDV"], "DOUBLE")
hdf = hdf.cast(["CHAS", "RAD", "TAX"], "INTEGER")
hdf = hdf.to_head("ID")

hdf.head(5).collect()
hdf.dtypes()

training_set, test_set, validation_set = train_test_val_split(data=hdf)

print('Number of rows in full set: {}'.format(hdf.count()))
print('Number of rows in training set: {}'.format(training_set.count()))
print('Number of rows in validation set: {}'.format(validation_set.count()))
print('Number of rows in test set: {}'.format(test_set.count()))

features=['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'BLACK', 'LSTAT']
label='MEDV'


# We build the model without IDs.  Project only the features and the label.
df = hdf.select(features, label)
model = UnifiedRegression(func='RandomForest')
model.fit(df, features=features, label=label)

df_test = test_set.cast(['CRIM', "ZN", "INDUS", "NOX", "RM", "AGE", "DIS", "PTRATIO", "BLACK", "LSTAT", "MEDV"], "DOUBLE")
df_test = df_test.cast(["CHAS", "RAD", "TAX"], "INTEGER")
df_test = df_test.to_head("ID")

# Note that we are renaming the column ID in the result of predict()
result_df = model.predict(df_test, key= 'ID', features=features).rename_columns({'ID': 'PREDICTED_ID'})
# Note the use of join() method to join two tables.
jdf = result_df.join(test_set, '{}."PREDICTED_ID"={}."ID"'.format(result_df.name, test_set.name), how='inner')

# predictions
jdf.head(5).collect()

# scoring
_, score = model.score(df_test, key='ID', features=features, label=label)
score.collect()

# git ref https://github.com/SAP-samples/hana-ml-samples/blob/main/Python-API/pal/notebooks/bostonHousingUnifiedRegressionRandomForest.ipynb

